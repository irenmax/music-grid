{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Cell.svelte",
    "../../Controls.svelte",
    "../../Row.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Row from './Row.svelte';\n\timport Controls from './Controls.svelte';\n\timport {initAudio, playRow, startRecording, stopRecording, setScale} from './Music.svelte';\n\tlet config = {\n\t\tplaying: false,\n\t\tspeed: 200,\n\t\trows: 16,\n\t\tscale_key: 'classic',\n\t}\n\n\tlet columns = 12;\n\tlet grid = [];\n\tlet gameInterval;\n\tlet curRow = 0;\n\tlet lastRow = 0;\n\tlet started = false;\n\tlet downloadLink;\n\tlet recording = false;\n\n\tconst togglePlaying = async () => {\n\t\tconfig.playing = !config.playing;\n\t\tif(!started) {\n\t\t\tstartPlaying();\n\t\t}\n\t}\n\n\tconst startPlaying = async () => {\n\t\tif(!started) {\n\t\t\tconfig.playing = true;\n\t\t\tstarted = true;\n\t\t\tawait initAudio();\n\t\t}\n\t}\n\n\tconst stopPlaying = () => {\n\t\tconfig.playing = false;\n\t\tif(lastRow < grid.length) {\n\t\t\tgrid[lastRow].isPlaying = false;\n\t\t}\n\t\tif(curRow < grid.length) {\n\t\t\tgrid[curRow].isPlaying = false;\n\t\t}\n\t\tcurRow = 0;\n\t\tlastRow = 0;\n\t}\n\n\tconst clearGrid = (rows) => {\n\t\tcurRow = 0;\n\t\tgrid = [...Array(rows)].map(\n\t\t\tx => Array(columns).fill(false) );\n\t}\n\n\tconst resizeGrid = (rows) => {\n\t\tstopPlaying();\n\t\twhile(grid.length < rows) {\n\t\t\tgrid.push([...Array(columns).fill(false)]);\n\t\t}\n\n\t\twhile(grid.length > rows) {\n\t\t\tgrid.pop();\n\t\t}\n\n\t\tgrid[0].isPlaying = false;\n\t}\n\n\tconst initGrid = (hash) => {\n\t\tconfig.playing = false;\n\t\tlet array = hash.split('&')[0].slice(1).split('-').map(x => parseInt(x, 10));\n\t\tconfig.rows = array.length - 1;\n\t\tgrid = []\n\t\tfor (var i = array.length - 2; i >= 0; i--) {\n\t\t\tlet temp = [... Array(columns).fill(false)];\n\t\t\tfor (var j = columns - 1; j >= 0; j--) {\n\t\t\t\ttemp[j] = (array[i] & (1 << (j))) !== 0;\n\t\t\t}\n\t\t\tgrid.push(temp.reverse());\n\t\t}\n\t\tif(hash.split('&').length > 1) {\n\t\t\tconfig.speed = parseInt(hash.split('&')[1], 10);\n\t\t}\n\t\tif(hash.split('&').length > 2) {\n\t\t\tconfig.scale_key = hash.split('&')[2];\n\t\t}\n\t}\n\n\tconst changeSpeed = (bpm) => {\n\t\tclearInterval(gameInterval);\n\t\tgameInterval = setInterval(() => {\n\t\t\tif(config.playing) {\n\t\t\t\tgrid[lastRow].isPlaying = false;\n\t\t\t\tgrid[curRow].isPlaying = true;\n\t\t\t\tplayRow(grid[curRow]);\n\t\t\t\tlastRow  = curRow;\n\t\t\t\tcurRow = (curRow + 1) % grid.length;\n\t\t\t}\n\t\t},  60 * 1000 / bpm);\n\t}\n\n\tconst downloadAudio = () => {\n\t\tif(recording) {\n\t\t\treturn;\n\t\t}\n\n\t\trecording = true;\n\t\tstopPlaying();\n\t\tconfig.playing = true;\n\t\tstartRecording(downloadLink);\n\n\t\t// Play to completion\n\t\tlet playbackTime = (grid.length * 60 * 1000) / config.speed;\n\t\tsetTimeout(() => {\n\t\t\tstopPlaying();\n\t\t}, playbackTime);\n\n\t\t// Record for a bit more.\n\t\tsetTimeout(() => {\n\t\t\tstopRecording();\n\t\t\trecording = false;\n\t\t}, playbackTime + 500);\n\t}\n\n\t$: changeSpeed(config.speed);\n\n\tclearGrid(config.rows);\n\n\tif(window.location.hash !== '') {\n\t\tinitGrid(window.location.hash);\n\t}\n\n</script>\n<style>\n\ttable {\n\t\tbackground: black;\n\t}\n\n\t.container {\n\t\tcolor: #ddd;\n\t}\n\n\t.footer a{\n\t\tfont-size: 0.8em;\n\t\tcolor: #ccc;\n\t\ttext-decoration: underline;\n\t}\n\n\t.tagline {\n\t\tfont-size: 0.8em;\n\t\tfont-weight: 600;\n\t}\n\n\t.message {\n\t\tfont-size: 0.7em;\n\t\tcolor: red;\n\t}\n\n\tinput[type=range] {\n\t\twidth: 20em;\n\t}\n</style>\n\n\n<div class=\"container\" align=\"center\">\n\t<h3>Music Grid</h3>\n\t<span class=\"tagline\">Turn on sound. Tap on the grid.<br/>Hit Play. You'll figure it out ;)</span>\n\t<br/>\n\t<Controls\n\t\tbind:grid={grid}\n\t\tbind:config={config}\n\t\ton:playpause={togglePlaying}\n\t\ton:stop={stopPlaying}\n\t\ton:clear={() => clearGrid(config.rows)}\n\t\ton:rowchange={() => resizeGrid(config.rows)}\n\t\ton:scalechange={() => setScale(config.scale_key)}\n\t\ton:download={downloadAudio}\n\t/>\n\t{#if recording}\n\t\t<span class=\"message\">Please wait for the playback to finish</span>\n\t{/if}\n\t<a bind:this={downloadLink} download=\"music-grid.wav\" hidden=\"true\">Download</a>\n\t<table on:click|once={startPlaying}>\n\t\t{#each grid as row}\n\t\t\t<Row bind:row={row} bind:playing={row.isPlaying} paused={!config.playing}/>\n\t\t{/each}\n\t</table>\n\t<br/>\n\t<div class=\"footer\" align=\"center\">\n\t\t<a href=\"https://irshadpi.me/best-of-music-grid\" target=\"_blank\">Best of Music Grid</a>\n\t\t<br/>\n\t\t<a href=\"https://svelte.dev\" target=\"_blank\">Svelte</a> \n\t\t| <a href=\"https://github.com/irshadshalu/music-grid\" target=\"_blank\"><i class=\"fa fa-lg fa-github\"></i></a> \n\t\t| <a href=\"https://irshadpi.me\" target=\"_blank\">irshad</a> \n\t</div>\n\t<br/>\n\t<br/>\n</div>\n",
    "<script>\n\timport {playCell} from './Music.svelte'\n\n\texport let active = false;\n\texport let column = 0;\n\texport let paused = false;\n\n\tconst drawActive = (e) => {\n\t\tif(e.buttons) {\n\t\t\ttoggleActive()\n\t\t}\n\t}\n\n\tconst toggleActive = () => {\n\t\tactive = !active;\n\t\tif(paused && active) {\n\t\t\tplayCell(column);\n\t\t}\n\t}\n</script>\n\n<style>\n\n\ttd {\n\t\tpadding-top: 0.15em;\n\t\tpadding-bottom: 0.15em;\n\t\tpadding-left: 0.1em;\n\t\tpadding-right: 0.1em;\n\t}\n\t\n\tdiv {\n\t\tbackground: #444;\n\t\tborder-radius: 3px;\n\t\twidth: 1.5em;\n\t\theight: 1.5em;\n\t\ttransition: 0.06s ease-in;\n\t\tuser-drag: none; \n\t\tuser-select: none;\n\t}\n\n\tdiv.active {\n\t\tbackground: #fff;\n\t\tbox-shadow: 0px 0px 8px 2px rgb(255, 255, 255, 0.5);\n\t}\n\n</style>\n\n<td>\n\t<div class:active={active} on:mouseover|capture={drawActive} on:click={toggleActive}>\n\t</div>\n</td>",
    "<script>\n\timport { createEventDispatcher, onMount } from 'svelte';\n\timport ClipboardJS from 'clipboard';\n\timport { scale_keys } from './Music.svelte';\n\n\tconst dispatch = createEventDispatcher();\n\n\texport let grid;\n\texport let config;\n\n\tlet urlUpdatedRecently = false;\n\tlet scrollY = 0;\n\n\tconst encodeGridToUrl = (grid, speed, scale) => {\n\t\tlet res = ''\n\t\tfor (var i = grid.length - 1; i >= 0; i--) {\n\t\t\tlet temp = 0, k = 1;\n\t\t\tfor (var j = grid[i].length - 1; j >= 0; j--) {\n\t\t\t\ttemp = temp + k * grid[i][j];\n\t\t\t\tk = k * 2;\n\t\t\t}\n\t\t\tres += (temp + '-');\n\t\t}\n\t\thistory.replaceState({}, '', '#' + res + '&' + speed + '&' + scale);\n\t}\n\n\tconst updateUrl = (grid, speed, scale) => {\n\t\tif(!urlUpdatedRecently) {\n\t\t\tencodeGridToUrl(grid, speed, scale);\n\t\t\turlUpdatedRecently = true;\n\t\t\tsetTimeout(() => {urlUpdatedRecently = false}, 1000);\n\t\t}\n\t}\n\n\t$: updateUrl(grid, config.speed, config.scale_key);\n\n\n\tlet clipboard = new ClipboardJS('.share', {\n\t\ttext: function() {\n\t\t\tencodeGridToUrl(grid, config.speed, config.scale_key);\n\t\t\treturn window.location.href;\n\t\t}\n\t});\n\n\n\tlet header;\n\tlet headerOffset;\n\tlet primaryClass = \"primary\";\n\n\tonMount(() => {\n\t\theaderOffset = header.offsetTop;\n\t});\n\n\tconst showSticky = (ignored) => {\n\t\tif(headerOffset) {\n\t\t\tif (window.pageYOffset > headerOffset) {\n\t\t\t\tprimaryClass = \"primary sticky\";\n\t\t\t} else {\n\t\t\t\tprimaryClass = \"primary\";\n\t\t\t}\n\t\t}\n\t}\n\n\t$: showSticky(scrollY);\n\n</script>\n\n<style>\n\n\t.fa {\n\t\ttransition: 0.06s ease-in;\n\t}\n\n\t.fa:hover {\n\t\ttransform: scale(1.1);\n\t}\n\n\t.fa:active {\n\t\ttransform: scale(0.8);\n\t}\n\n\ta {\n\t\tmargin-right: 4px;\n\t\tmargin-left: 4px;\n\t\tpadding: 12px;\n\t\tcolor: white;\n\t}\n\n\t.primary, .settings {\n\t\tpadding: 10px;\n\t\tbackground: black;\n\t}\n\n\t.sticky {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t}\n\n\tselect {\n\t\tbackground: black;\n\t\tcolor: white;\n\t\tborder: none;\n\t\toutline: none;\n\t}\n</style>\n<svelte:window bind:scrollY={scrollY}/>\n\n<div class=\"container\">\n\t<div class=\"settings\">\n\t\t<label>\n\t\t\tRows :\n\t\t\t<input bind:value={config.rows}\n\t\t\ton:input={() => dispatch('rowchange')}\n\t\t\t type=\"range\" min=\"8\" max=\"100\" class=\"slider\">\n\t\t\t {config.rows}\n\t\t</label>\n\t\t<br/>\n\t\t<label>\n\t\t\tSpeed :\n\t\t\t<input bind:value={config.speed}\n\t\t\t type=\"range\" min=\"60\" max=\"500\" class=\"slider\">\n\t\t\t {config.speed}\n\t\t</label>\n\t\t<br/>\n\t\t<label>\n\t\t\tScale :\n\t\t\t<select bind:value={config.scale_key} on:change={() => dispatch('scalechange')}>\n\t\t\t\t{#each scale_keys as scale}\n\t\t\t\t<option value={scale}>\n\t\t\t\t\t{scale}\n\t\t\t\t</option>\n\t\t\t\t{/each}\n\t\t\t</select>\n\t\t</label>\n\t</div>\n\t<div class={primaryClass} bind:this={header}>\n\t\t<a on:click={() => dispatch('playpause')}>\n\t\t\t{#if config.playing}\n\t\t\t\t<i class=\"fa fa-lg fa-inverse fa-pause\"/>\n\t\t\t{:else}\n\t\t\t\t<i class=\"fa fa-lg fa-inverse fa-play\"/>\n\t\t\t{/if}\n\t\t</a>\n\t\t<a on:click={() => dispatch('stop')}><i class=\"fa fa-inverse fa-lg fa-stop\"/></a>\n\t\t<a on:click={() => dispatch('clear')}><i class=\"fa fa-lg fa-trash\"/></a>\n\t\t<a on:click={() => alert('Link copied to clipboard. Paste it to share')} class=\"share\"><i class=\"fa fa-lg fa-share-alt\"/></a>\n\t\t<a on:click={() => dispatch('download')}><i class=\"fa fa-lg fa-download\"/></a>\n\t</div>\n</div>\n",
    "<script>\n\timport Cell from './Cell.svelte'\n\timport { playRow } from './Music.svelte'\n\texport let row = [];\n\texport let playing = false;\n\texport let paused = false;\n\n\tconst playThisRow = () => {\n\t\trow.isPlaying = true;\n\t\tplayRow(row);\n\t\tsetTimeout(() => {\n\t\t\trow.isPlaying = false;\n\t\t}, 500);\n\t}\n</script>\n\n<style>\n\ttr.playing {\n\t\ttransform: scale(0.95);\n\t}\n\ttr {\n\t\ttransition: 0.1s ease-in all;\n\t}\n\n\ti.row-play {\n\t\tmargin-top: 7px;\n\t\tmargin-right: 4px;\n\t\tfont-size: 14px;\n\t\tcolor: dimgrey;\n\t\tcursor: pointer;\n\t}\n\ti.row-play:hover {\n\t\tcolor: white;\n\t}\n</style>\n\n<tr class:playing={playing}>\n\t<i on:click={playThisRow} class=\"row-play fa fa-sm fa-inverse fa-play\"/>\n\t{#each row as cell, index}\n\t\t<Cell bind:active={cell} column=\"{index}\" paused={paused}></Cell>\n\t{/each}\n</tr>"
  ],
  "names": [],
  "mappings": "AAoIC,KAAK,4BAAC,CAAC,AACN,UAAU,CAAE,KAAK,AAClB,CAAC,AAED,UAAU,4BAAC,CAAC,AACX,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,qBAAO,CAAC,eAAC,CAAC,AACT,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,SAAS,AAC3B,CAAC,AAED,QAAQ,4BAAC,CAAC,AACT,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,QAAQ,4BAAC,CAAC,AACT,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,GAAG,AACX,CAAC;ACnID,EAAE,cAAC,CAAC,AACH,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MAAM,CACtB,YAAY,CAAE,KAAK,CACnB,aAAa,CAAE,KAAK,AACrB,CAAC,AAED,GAAG,cAAC,CAAC,AACJ,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CAAC,OAAO,CACzB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,AAClB,CAAC,AAED,GAAG,OAAO,cAAC,CAAC,AACX,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACpD,CAAC;AC0BD,GAAG,cAAC,CAAC,AACJ,UAAU,CAAE,KAAK,CAAC,OAAO,AAC1B,CAAC,AAED,iBAAG,MAAM,AAAC,CAAC,AACV,SAAS,CAAE,MAAM,GAAG,CAAC,AACtB,CAAC,AAED,iBAAG,OAAO,AAAC,CAAC,AACX,SAAS,CAAE,MAAM,GAAG,CAAC,AACtB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,YAAY,CAAE,GAAG,CACjB,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,KAAK,AACb,CAAC,AAED,sBAAQ,CAAE,SAAS,cAAC,CAAC,AACpB,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,KAAK,AAClB,CAAC,AAED,OAAO,cAAC,CAAC,AACR,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,MAAM,cAAC,CAAC,AACP,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,AACd,CAAC;ACxFD,EAAE,QAAQ,cAAC,CAAC,AACX,SAAS,CAAE,MAAM,IAAI,CAAC,AACvB,CAAC,AACD,EAAE,cAAC,CAAC,AACH,UAAU,CAAE,IAAI,CAAC,OAAO,CAAC,GAAG,AAC7B,CAAC,AAED,CAAC,SAAS,cAAC,CAAC,AACX,UAAU,CAAE,GAAG,CACf,YAAY,CAAE,GAAG,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,OAAO,AAChB,CAAC,AACD,CAAC,uBAAS,MAAM,AAAC,CAAC,AACjB,KAAK,CAAE,KAAK,AACb,CAAC"
}